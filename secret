<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Secret</title>
</head>
<body>
  <input id="input" type="text">
  <button id="encode"> 加密 </button>
  <input id="secrect" type="text">
  <button id="decode"> 解密 </button>
  <input id="out" type="text" disabled>
  <script>
    class Secret {       
      constructor(){
        this.b = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ|_-,'
        this.key = 123
        this.len = 10
        if(this.key.toString().length > this.len){
          this.key = this.key.toString().slice(0, this.len) - 0
        }else if(this.key.toString().length == 0){
          this.key = 123
        }
      }

      enCode(n){
        if(n === undefined || n === null){
          return ''
        }
        // 原始数 数字
        n = parseInt(n)

        // 补齐
        let num = (n + parseInt(this.key)).toString()
        while(num.length < this.len){
          num = '0' + num
        }
        // key 补齐
        let salt = this.getSolt()
        // 原始数 加盐
        let soltList = num.split('').map((i,index)=>{
          let v = parseInt(salt[index])
          return (parseInt(i) + 1) * (v % 3 + 1) + v*(index+1) %10
        })

        // 乱序 关键字
        let sup_r = '2' + parseInt(n+1)
        let redu = sup_r.split('').reduce((i, n)=> parseInt(i)+ parseInt(n), 1)
        let sup = ( parseInt(redu) + sup_r.length ) %10
        // 乱序
        let mapList = []
        while(mapList.length<this.len){
          mapList.push(mapList.length)
        }
        let map = this.getMap(sup, mapList)
        let modList = this.getMap(sup, map)
        // 单项偏移 && 追加特征值
        let r = modList.map(i=> soltList[i]).concat(sup*2)
        // 置换密文
        let res = r.map(r=> this.b[r])
        return res.join('')
      }
      deCode(w){
        w = w.trim()
        let base = w.split('').map(i=> this.b.indexOf(i))
        // 特征值
        let sup = parseInt(base.slice(-1))/2
        // 基础数组
        let list = base.slice(0, this.len)

        // 排序修正
        let mapList = []
        while(mapList.length<this.len){
          mapList.push(mapList.length)
        }
        let map = this.getMap(sup, mapList)
        let modList = this.getMap(sup, map)

        let sort = []
        for(let i = 0; i< list.length; i++){
          let index = modList.indexOf(i)
          sort.push(list[index])
        }

        let salt = this.getSolt()
        let res = sort.map((i, index)=>{
          let v = parseInt(salt[index])
          return (i - v*(index+1) %10) / (v % 3 + 1) - 1
        })
        let temp = res.map(i=> parseInt(i)).join('')
        let num = parseInt(temp) - parseInt(this.key)
        return num
      }
      getSolt(){
        let l = ''
        let k = this.key * 2 + 7
        while(l.length < this.len){
          l += (k+'')
          k += (this.key )
        }
        return l.slice(0,this.len)
      }
      getMap(m, arr){
        let list = [...arr], result = [];
        m = parseInt(m);
        for(let i = 0; i< arr.length; i++){
          let k = Math.pow(i + m, 2) % (12 - (m+3)%5)
          let index = k % list.length
          if(i%2 == 1){
            list = list.reverse()
          }
          let val = list.splice(index, 1)[0]
          result.push(val)
        }
        return result
      }
    }



    let sec = new Secret()
    let entry = document.getElementById('input'),
      secrect = document.getElementById('secrect'),
      out = document.getElementById('out');
    let encode = document.getElementById('encode'),
      decode = document.getElementById('decode');

    encode.onclick = ()=>{
      let text = entry.value
      let secrectText = sec.enCode(parseInt(text))
      secrect.value = secrectText
    }
    decode.onclick = ()=>{
      let text = secrect.value
      let outText = sec.deCode(text)
      out.value = outText
    }

  </script>
</body>
</html>
